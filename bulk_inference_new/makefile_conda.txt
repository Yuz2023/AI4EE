# Makefile for LLaMA Inference Environment Management

# Environment name
ENV_NAME = llama-inference
CONDA_BASE = $(shell conda info --base)
CONDA_ACTIVATE = source $(CONDA_BASE)/etc/profile.d/conda.sh ; conda activate $(ENV_NAME)

# Color output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
NC = \033[0m # No Color

.PHONY: help install install-cpu install-minimal install-dev clean update test server inference check-gpu

help: ## Show this help message
	@echo "LLaMA Inference Environment Management"
	@echo "======================================"
	@echo ""
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "Examples:"
	@echo "  make install        # Install full environment with GPU support"
	@echo "  make install-cpu    # Install CPU-only environment"
	@echo "  make server        # Start the model server"
	@echo "  make test          # Run tests"

install: ## Install the full conda environment with GPU support
	@echo "$(GREEN)[INFO]$(NC) Installing full environment with GPU support..."
	@bash setup_environment.sh
	@echo "$(GREEN)[SUCCESS]$(NC) Installation complete!"

install-cpu: ## Install CPU-only environment
	@echo "$(YELLOW)[INFO]$(NC) Installing CPU-only environment..."
	@cp environment-cpu.yml environment.yml
	@bash setup_environment.sh
	@mv environment.yml environment-full.yml
	@mv environment-cpu.yml environment.yml
	@echo "$(GREEN)[SUCCESS]$(NC) CPU-only installation complete!"

install-minimal: ## Install minimal environment
	@echo "$(YELLOW)[INFO]$(NC) Installing minimal environment..."
	@conda env create -f environment-minimal.yml --force
	@echo "$(GREEN)[SUCCESS]$(NC) Minimal installation complete!"

install-dev: ## Install development environment
	@echo "$(GREEN)[INFO]$(NC) Installing development environment..."
	@conda env create -f environment-dev.yml --force
	@echo "$(GREEN)[SUCCESS]$(NC) Development installation complete!"

clean: ## Remove the conda environment
	@echo "$(RED)[WARNING]$(NC) Removing environment $(ENV_NAME)..."
	@conda env remove -n $(ENV_NAME) -y 2>/dev/null || true
	@conda env remove -n llama-inference-cpu -y 2>/dev/null || true
	@conda env remove -n llama-inference-minimal -y 2>/dev/null || true
	@conda env remove -n llama-inference-dev -y 2>/dev/null || true
	@echo "$(GREEN)[SUCCESS]$(NC) Environment(s) removed!"

update: ## Update the conda environment
	@echo "$(GREEN)[INFO]$(NC) Updating environment..."
	@conda env update -n $(ENV_NAME) -f environment.yml --prune
	@echo "$(GREEN)[SUCCESS]$(NC) Environment updated!"

check-gpu: ## Check GPU availability and CUDA version
	@echo "$(GREEN)[INFO]$(NC) Checking GPU configuration..."
	@nvidia-smi --query-gpu=index,name,memory.total,memory.free --format=csv || echo "$(RED)[ERROR]$(NC) No NVIDIA GPU detected"
	@echo ""
	@echo "$(GREEN)[INFO]$(NC) Checking CUDA in Python environment..."
	@bash -c "$(CONDA_ACTIVATE) && python -c 'import torch; print(f\"PyTorch version: {torch.__version__}\"); print(f\"CUDA available: {torch.cuda.is_available()}\"); print(f\"CUDA version: {torch.version.cuda if torch.cuda.is_available() else None}\"); print(f\"GPU count: {torch.cuda.device_count() if torch.cuda.is_available() else 0}\")'"

test: ## Run tests
	@echo "$(GREEN)[INFO]$(NC) Running tests..."
	@bash -c "$(CONDA_ACTIVATE) && python -m pytest tests/ -v"

server: ## Start the model server
	@echo "$(GREEN)[INFO]$(NC) Starting model server..."
	@bash -c "$(CONDA_ACTIVATE) && python model_server_inference.py"

inference: ## Run inference (interactive prompt for dataset)
	@echo "$(GREEN)[INFO]$(NC) Starting inference..."
	@read -p "Enter dataset name (e.g., sst2, mmlu, bool_logic): " dataset; \
	read -p "Enter mode (sequential/parallel) [parallel]: " mode; \
	mode=$${mode:-parallel}; \
	bash -c "$(CONDA_ACTIVATE) && python bulk_inference.py --dataset $$dataset --mode $$mode"

sample-datasets: ## Create sampled datasets
	@echo "$(GREEN)[INFO]$(NC) Creating sampled datasets..."
	@bash -c "$(CONDA_ACTIVATE) && python dataset_sampler_inference.py"

inspect-dataset: ## Inspect a dataset structure
	@read -p "Enter dataset name to inspect: " dataset; \
	bash -c "$(CONDA_ACTIVATE) && python -c \"import promptbench as pb; import json; ds = pb.DatasetLoader.load_dataset('$$dataset'); print(f'Dataset: $$dataset'); print(f'Size: {len(ds)}'); print(f'First example:'); print(json.dumps(ds[0] if len(ds) > 0 else {}, indent=2))\""

monitor: ## Monitor GPU usage
	@watch -n 1 nvidia-smi

logs: ## View server logs
	@tail -f bulk_inference.log

shell: ## Open a shell in the conda environment
	@bash -c "$(CONDA_ACTIVATE) && bash"

jupyter: ## Start Jupyter Lab
	@echo "$(GREEN)[INFO]$(NC) Starting Jupyter Lab..."
	@bash -c "$(CONDA_ACTIVATE) && jupyter lab"

freeze: ## Export current environment to requirements.txt
	@echo "$(GREEN)[INFO]$(NC) Exporting environment..."
	@bash -c "$(CONDA_ACTIVATE) && pip freeze > requirements-frozen.txt"
	@echo "$(GREEN)[SUCCESS]$(NC) Requirements exported to requirements-frozen.txt"

docker-build: ## Build Docker image
	@echo "$(GREEN)[INFO]$(NC) Building Docker image..."
	@docker build -t llama-inference:latest .

docker-run: ## Run Docker container
	@echo "$(GREEN)[INFO]$(NC) Running Docker container..."
	@docker run --gpus all -p 8000:8000 -v $(PWD)/models:/models llama-inference:latest

validate: ## Validate all configuration files
	@echo "$(GREEN)[INFO]$(NC) Validating configuration files..."
	@python -m py_compile model_server_inference.py
	@python -m py_compile bulk_inference.py
	@python -m py_compile dataset_processor_inference.py
	@python -m py_compile dataset_sampler_inference.py
	@python -m py_compile dataset_loader_inference.py
	@echo "$(GREEN)[SUCCESS]$(NC) All Python files are valid!"
	@conda env config vars list -n $(ENV_NAME) 2>/dev/null || true

info: ## Show environment information
	@echo "$(GREEN)Environment Information$(NC)"
	@echo "======================="
	@conda info
	@echo ""
	@echo "$(GREEN)Available Environments:$(NC)"
	@conda env list
	@echo ""
	@echo "$(GREEN)Current Environment Packages:$(NC)"
	@bash -c "$(CONDA_ACTIVATE) && conda list | head -20"